server.port=${PORT:0}
spring.application.name=order-service

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Eureka-server Configuration
eureka.client.serviceUrl.defaultZone=${EUREKA_URI:http://localhost:8012/eureka}
spring.devtools.restart.enabled=true
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}


# Resilience4j Circuit Breaker Configuration

# Circuit Breaker name
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.registerHealthIndicator=true

# Circuit Breaker Settings
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.slidingWindowSize=4  # Hangi pencerede karar verilecek (100 istek üzerinden karar verilir)
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.failureRateThreshold=50   # %50 ba?ar?s?zl?k oran? devre kesicinin aç?lmas?na neden olur
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.waitDurationInOpenState=5000ms  # Aç?k durumda ne kadar süre beklenmeli (5 saniye)
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.slidingWindowType=TIME_BASED  # Pencere türü: zaman tabanl? (istek bazl? da olabilir)
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3  # Yar? aç?k durumda yap?labilecek istek say?s?
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.minimumNumberOfCalls=5  # Devre kesici devreye girmeden önce yap?lacak minimum ça?r? say?s?
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.eventConsumerBufferSize=10  # Devre kesicinin olay tüketici tamponu boyutu
resilience4j.circuitbreaker.instances.findUserByIdCircuitBreaker.timeoutDuration=1000ms  # Zaman a??m? süresi (1 saniye)
